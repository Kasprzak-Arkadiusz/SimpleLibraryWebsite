@using SimpleLibraryWebsite.Models.Authorization
@model SimpleLibraryWebsite.Models.ViewModels.LoanViewModel
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService _authorizationService

@{
    ViewData["Title"] = "List of loans";
}

<h1>Book loans</h1>

<p>Here you can see all book loans.</p>
    
<form asp-controller="Loans" asp-action="Index" method="get">
    <div class="container">
        <div class="row">
            <div class="form-group">
                <div class="col-md-8">
                    <b>Reader name:</b>
                    <input type="text" asp-for="ReaderName" value="@ViewData["CurrentNameFilter"]"/>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                <div class="col-md-8">
                    <b>Reader LastName:</b>
                    <input type="text" asp-for="ReaderLastName" value="@ViewData["CurrentLastNameFilter"]"/>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group">
                <div class="col-md-8">
                    <b>Book title:</b>
                    <input type="text" asp-for="BookTitle" value="@ViewData["CurrentTitleFilter"]" />
                </div>
            </div>
        </div>

        <input type="submit" value="Filter" />
    </div>
</form>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
    <tr>
        <th>
            <a asp-action="Index" asp-route-sortOrder="@ViewData["TitleSortParam"]" 
               asp-route-currentNameFilter="@ViewData["CurrentNameFilter"]"
               asp-route-currentLastNameFilter="@ViewData["CurrentLastNameFilter"]"
               asp-route-currentTitleFilter="@ViewData["CurrentTitleFilter"]">
                @Html.DisplayNameFor(model => model.PaginatedList.FirstOrDefault().Book.Title)
            </a>
        </th>
        <th>
            <a asp-action="Index" asp-route-sortOrder="@ViewData["ReaderNameSortParam"]"
               asp-route-currentNameFilter="@ViewData["CurrentNameFilter"]"
               asp-route-currentLastNameFilter="@ViewData["CurrentLastNameFilter"]"
               asp-route-currentTitleFilter="@ViewData["CurrentTitleFilter"]">
                @Html.DisplayNameFor(model => model.PaginatedList.FirstOrDefault().Reader.FirstName)
            </a>
        </th>
        <th>
            <a asp-action="Index" asp-route-sortOrder="@ViewData["ReaderLastNameSortParam"]"
               asp-route-currentNameFilter="@ViewData["CurrentNameFilter"]"
               asp-route-currentLastNameFilter="@ViewData["CurrentLastNameFilter"]"
               asp-route-currentTitleFilter="@ViewData["CurrentTitleFilter"]">
                @Html.DisplayNameFor(model => model.PaginatedList.FirstOrDefault().Reader.LastName)
            </a>
        </th>
        <th>
            <a asp-action="Index" asp-route-sortOrder="@ViewData["LentToSortParam"]"
               asp-route-currentNameFilter="@ViewData["CurrentNameFilter"]"
               asp-route-currentLastNameFilter="@ViewData["CurrentLastNameFilter"]"
               asp-route-currentTitleFilter="@ViewData["CurrentTitleFilter"]">
                @Html.DisplayNameFor(model => model.PaginatedList.FirstOrDefault().LentTo)
            </a>
        </th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.PaginatedList) {
        <tr>

            <td>
                @Html.DisplayFor(modelItem => item.Book.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Reader.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Reader.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LentTo)
            </td>
            <td>
                @if ((await _authorizationService.AuthorizeAsync(
                    User, item,
                    ContactOperations.Return)).Succeeded)
                {
                    <a asp-action="Return" asp-route-id="@item.LoanId">Return</a>
                    <text> | </text>
                }
                <a asp-action="Details" asp-route-id="@item.LoanId">Details</a>
                    <text> | </text>
                @if ((await _authorizationService.AuthorizeAsync(
                    User, item,
                    ContactOperations.Return)).Succeeded)
                {
                        <a asp-action="Edit" asp-route-id="@item.LoanId">Edit</a>
                        <text> | </text>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@{
    string prevDisabled = !Model.PaginatedList.HasPreviousPage ? "disabled" : "";
    string nextDisabled = !Model.PaginatedList.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PaginatedList.PageIndex - 1)"
   asp-route-currentNameFilter="@ViewData["CurrentNameFilter"]"
   asp-route-currentLastNameFilter="@ViewData["CurrentLastNameFilter"]"
   asp-route-currentTitleFilter="@ViewData["CurrentTitleFilter"]"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PaginatedList.PageIndex + 1)"
   asp-route-currentNameFilter="@ViewData["CurrentNameFilter"]"
   asp-route-currentLastNameFilter="@ViewData["CurrentLastNameFilter"]"
   asp-route-currentTitleFilter="@ViewData["CurrentTitleFilter"]"
   class="btn btn-primary @nextDisabled">
    Next
</a>